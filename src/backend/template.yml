AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.11
    Timeout: 600

Resources:
  # AWS Layers
  AWSUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AWSUtilsLayer
      ContentUri: layers/aws_utils
      CompatibleRuntimes:
        - python3.11
    Metadata:
      BuildMethod: python3.11

  # SQS Queues
  PropertiesAPIQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PropertiesAPIQueue
      VisibilityTimeout: 660
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PropertiesAPIDeadLetterQueue.Arn
        maxReceiveCount: 1 # Retry each message up to 1 time before sending to DLQ

  PropertiesAPIDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PropertiesAPIDeadLetterQueue

  PropertyDetailsAPIQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PropertyDetailsAPIQueue
      VisibilityTimeout: 660
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PropertyDetailsAPIDeadLetterQueue.Arn
        maxReceiveCount: 1 # Retry each message up to 1 time before sending to DLQ

  PropertyDetailsAPIDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PropertyDetailsAPIDeadLetterQueue

  # Lambda Functions
  GenericAPISQSProducer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GenericAPISQSProducer
      Handler: producer.lambda_handler
      CodeUri: generic_api_sqs_producer
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/AWSUserDefinedRoleForLambda
      Layers:
        - !Ref AWSUtilsLayer
      Environment:
        Variables:
          PROPERTIES_API_URL: !Ref PropertiesAPIQueue
          PROPERTY_DETAILS_API_URL: !Ref PropertyDetailsAPIQueue

  PropertiesAPISQSConsumer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PropertiesAPISQSConsumer
      Handler: consumer.lambda_handler
      CodeUri: properties_api_sqs_consumer
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/AWSUserDefinedRoleForLambda
      Layers:
        - !Ref AWSUtilsLayer
      Events:
        MyQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PropertiesAPIQueue.Arn
            BatchSize: 10 # Process 10 messages at a time
            MaximumBatchingWindowInSeconds: 2

  PropertyDetailsAPISQSConsumer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PropertyDetailsAPISQSConsumer
      Handler: consumer.lambda_handler
      CodeUri: property_details_api_sqs_consumer
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/AWSUserDefinedRoleForLambda
      Layers:
        - !Ref AWSUtilsLayer
      # ReservedConcurrentExecutions: 5  # Limit to 5 concurrent instances
      Events:
        MyQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PropertyDetailsAPIQueue.Arn
            BatchSize: 50 # Process 50 messages at a time
            MaximumBatchingWindowInSeconds: 20

  PropertyDataEnhancementLoader:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PropertyDataEnhancementLoader
      Handler: loader.lambda_handler
      CodeUri: property_data_enhancement_loader
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/AWSUserDefinedRoleForLambda
      Layers:
        - !Ref AWSUtilsLayer

  DataProcessChecker:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DataProcessChecker
      Handler: checker.lambda_handler
      CodeUri: data_process_checker
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/AWSUserDefinedRoleForLambda
      Layers:
        - !Ref AWSUtilsLayer
        
  AnthropicBatchProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AnthropicBatchProcessor
      Handler: batch_processor.lambda_handler
      CodeUri: anthropic_batch_processor
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/AWSUserDefinedRoleForLambda
      Layers:
        - !Ref AWSUtilsLayer
  # APIRouter:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: APIRouter
  #     Handler: router.lambda_handler
  #     CodeUri: api_router
  #     Role: !Sub arn:aws:iam::${AWS::AccountId}:role/AWSUserDefinedRoleForAPIRouterLambda
  #     Layers:
  #       - !Ref AWSUtilsLayer
  #     Events:
  #       HttpApiEvent:
  #         Type: HttpApi
  #         Properties:
  #           ApiId: !Ref HttpApi
  #           Path: /{proxy+}
  #           Method: ANY

  # # Gateway API
  # HttpApi:
  #   Type: AWS::Serverless::HttpApi
  #   Properties:
  #     StageName: Prod

  # DynamoDB Table
  PropertyMediaDetailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PropertyMediaDetails
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S # 'S' for String (unique identifier for each property)
      KeySchema:
        - AttributeName: id
          KeyType: HASH # Partition key
      BillingMode: PROVISIONED # Use provisioned capacity to utilize the Free Tier
      ProvisionedThroughput:
        ReadCapacityUnits: 5 # Keep this low to stay within the Free Tier
        WriteCapacityUnits: 5 # Keep this low to stay within the Free Tier
      SSESpecification:
        SSEEnabled: true # Enable server-side encryption for data security
      Tags:
        - Key: Environment
          Value: Production